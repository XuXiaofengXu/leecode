package dp;

public class 面试题_17_09_第k个数 {

    /**
     * 题目所求的数，任何一个数的构成都是　3^n * 5^m * 7^k (其中n>=0,m>=0,k>=0)，所以最小的数为1(当n=0 & m=0 & k=0)
     * 最笨的办法就是每次都指定n,m,k ，然后每次都算　(3*3*3*...*3)*(5*5*5*...*5)*(7*7*7*...7)
     * 但观察一下结构，其他有一些地方可以优化 3^n * 5^m * 7^k = 3*3^(n-1) * 5^m * 7^k = 3^n * 5*5^(m-1) * 7^k = 3^n * 5^m * 7*7^(k-1) ，所以前面的数的计算结果，后面的数是可以利用到的
     * 所以要构造一个新的最小的数，其实就是对现有的所有数，分别乘上3,5,7，然后选取一个最小的数，但由于一些数已经构造过了，不需要重复构造了，所以需要分别设置3个指针来指明之前已经构造过的位置边界
     * @param k
     * @return
     */
    public int getKthMagicNumber(int k) {
        int arr[] = new int[k];
        arr[0] = 1;//第0数是1
        int p3 = 0,p5 = 0,p7 = 0;//将3个指针放在数组的第0位置
        for(int i=1;i<k;i++){
            arr[i] = Math.min(arr[p3]*3,Math.min(arr[p5]*5,arr[p7]*7)); //获取下一个最小值

            //判断哪些等于最小值(可能有多个),指针后移，说明已经构造过了
            if(arr[p3]*3==arr[i]){
                p3++;
            }
            if(arr[p5]*5==arr[i]){
                p5++;
            }
            if(arr[p7]*7==arr[i]){
                p7++;
            }
        }
        return arr[k-1];
    }
}
